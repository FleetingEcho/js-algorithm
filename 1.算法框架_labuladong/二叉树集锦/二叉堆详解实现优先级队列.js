/* 
二叉堆（Binary Heap）没什么神秘，性质比二叉搜索树 BST 还简单。其主要操作就两个，
sink（下沉）和 swim（上浮），用以维护二叉堆的性质。其主要应用有两个，
首先是一种排序方法「堆排序」，第二是一种很有用的数据结构「优先级队列」。

因为，二叉堆其实就是一种特殊的二叉树（完全二叉树），只不过存储在数组里。
一般的链表二叉树，我们操作节点的指针，而在数组里，我们把数组索引作为指针：

! Priority Queue 优先级队列   ---插入删除元素，元素会自动排序

二叉堆还分为最大堆和最小堆。最大堆的性质是：每个节点都大于等于它的两个子节点。
类似的，最小堆的性质是：每个节点都小于等于它的子节点。

*/

/*
! 实现最大堆 
数据结构的功能无非增删查该，优先级队列有两个主要 API，
分别是 insert 插入一个元素和 delMax 删除最大元素（如果底层用最小堆，那么就是 delMin）。
*/

// 为什么要有上浮 swim 和下沉 sink 的操作呢？为了维护堆结构。
/* 
如果某个节点 A 比它的子节点（中的一个）小，那么 A 就不配做父节点，应该下去，下面那个更大的节点上来做父节点，这就是对 A 进行下沉。
如果某个节点 A 比它的父节点大，那么 A 不应该做子节点，应该把父节点换下来，自己去做父节点，这就是对 A 的上浮。
*/
/* 
* 优先级队列是基于二叉堆实现的，主要操作是插入和删除。插入是先插到最后，然后上浮到正确位置；删除是调换位置后再删除，然后下沉到正确位置。核心代码也就十行。
*/
/* 
! ~~x就为 -(-(x+1) + 1)
! -(x + 1)
*/

