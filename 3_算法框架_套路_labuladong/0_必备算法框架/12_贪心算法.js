/* 
* 什么是贪心算法呢？贪心算法可以认为是动态规划算法的一个特例，
相比动态规划，使用贪心算法需要满足更多的条件（贪心选择性质），
但是效率比动态规划要高。

比如说一个算法问题使用暴力解法需要指数级时间，
>如果能使用动态规划消除重叠子问题，就可以降到多项式级别的时间，
>如果满足贪心选择性质，那么可以进一步降低时间复杂度，达到线性级别的。

>什么是贪心选择性质呢，简单说就是：每一步都做出一个局部最优的选择
>最终的结果就是全局最优


! 但是 注意，这是一种特殊性质，其实只有一部分问题拥有这个性质。
然而，大部分问题明显不具有贪心选择性质。比如打斗地主，对手出对儿三，按照贪心策略，
你应该出尽可能小的牌刚好压制住对方，但现实情况我们甚至可能会出王炸。
这种情况就不能用贪心算法，而得使用动态规划解决，参见前文「动态规划解决博弈问题」。
*/
//* 那么贪心算法作为特殊的动态规划也是一样，也一定是让你求个最值。这道题表面上不是求最值，但是可以改一改：

// 例如453的无重叠区间 问题  (边界触碰不算重叠)

// 例如452的最少数量射爆气球   (边界触碰算重叠)
function findMinArrowShots(intvs) {
  if (intvs.length == 0) return 0;
  // 按 end 升序排序
  intvs.sort((a,b)=>{return a[1] - b[1]})
  // 至少有一个区间不相交
  let count = 1;
  // 排序后，第一个区间就是 x
  let x_end = intvs[0][1];
  for (let interval of intvs) {
      let start = interval[0];
      if (start > x_end) {
          // 找到下一个选择的区间了
          count++;
          x_end = interval[1];
      }
  }
  return count; //返回的是最多有几个区间不会重叠
}

