// 877. 石子游戏
// https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/dong-tai-gui-hua-zhi-bo-yi-wen-ti
/* 
输入：[5,3,4,5]
输出：true
解释：
亚历克斯先开始，只能拿前 5 颗或后 5 颗石子 。
假设他取了前 5 颗，这一行就变成了 [3,4,5] 。
如果李拿走前 3 颗，那么剩下的是 [4,5]，亚历克斯拿走后 5 颗赢得 10 分。
如果李拿走后 5 颗，那么剩下的是 [3,4]，亚历克斯拿走后 4 颗赢得 9 分。
这表明，取前 5 颗石子对亚历克斯来说是一个胜利的举动，所以我们返回 true 。
*/

//* 升级版！

/* 

你和你的朋友面前有一排石头堆，用一个数组 piles 表示，piles[i] 表示第 i 堆石子有多少个。
你们轮流拿石头，一次拿一堆，但是只能拿走最左边或者最右边的石头堆。
所有石头被拿完后，谁拥有的石头多，谁获胜。
石头的堆数可以是任意正整数，石头的总数也可以是任意正整数，
这样就能打破先手必胜的局面了。

比如有三堆石头 piles = [1, 100, 3]，
先手不管拿 1 还是 3，能够决定胜负的 100 都会被后手拿走，后手会获胜。
假设两人都很聪明，请你设计一个算法，返回先手和后手的最后得分（石头总数）之差。
比如上面那个例子，先手能获得 4 分，后手会获得 100 分，你的算法应该返回 -96。

*/


// * 我们想求的答案是先手和后手最终分数之差，按照这个定义也就是 dp[0][n-1].fir - dp[0][n-1].sec，即面对整个 piles，先手的最优得分和后手的最优得分之差。

/* 
! 状态转移方程

dp[i][j].fir = max(piles[i] + dp[i+1][j].sec, piles[j] + dp[i][j-1].sec)
dp[i][j].fir = max(    选择最左边的石头堆     ,     选择最右边的石头堆     )
# 解释：我作为先手，面对 piles[i...j] 时，有两种选择：
# 要么我选择最左边的那一堆石头，然后面对 piles[i+1...j]
# 但是此时轮到对方，相当于我变成了后手；
# 要么我选择最右边的那一堆石头，然后面对 piles[i...j-1]
# 但是此时轮到对方，相当于我变成了后手。

if 先手选择左边:
    dp[i][j].sec = dp[i+1][j].fir
if 先手选择右边:
    dp[i][j].sec = dp[i][j-1].fir
# 解释：我作为后手，要等先手先选择，有两种情况：
# 如果先手选择了最左边那堆，给我剩下了 piles[i+1...j]
# 此时轮到我，我变成了先手；
# 如果先手选择了最右边那堆，给我剩下了 piles[i...j-1]
# 此时轮到我，我变成了先手。

*/


class Pair {
  constructor(fir, sec){
      this.fir = fir;
      this.sec = sec;
  }
}

// ! 注意一下斜着遍历数组的技巧：
/* 返回游戏最后先手和后手的得分之差 */
/* 
而且，注意到计算 dp[i][j] 只依赖其左边和下边的元素，
所以说肯定有优化空间，转换成一维 dp，想象一下把二维平面压扁，
也就是投影到一维。但是，一维 dp 比较复杂，可解释性很差，大家就不必浪费这个时间去理解了。

*/

/* 
学习算法，一定要注重算法的模板框架，而不是一些看起来牛逼的思路，也不要奢求上来就写一个最优的解法。
不要舍不得多用空间，不要过早尝试优化，不要惧怕多维数组。
dp 数组就是存储信息避免重复计算的，随便用，直到咱满意为止。

*/
let piles=[3,9,1,2];
function stoneGame(piles) {
  let n = piles.length;
  // 初始化 dp 数组
  // 根据前面对 dp 数组的定义，状态显然有三个：开始的索引 i，结束的索引 j，当前轮到的人。
  let dp=new Array(n).fill(0).map(v=>new Array(n).fill(0))
  for (let i = 0; i < n; i++) {
    for (let j = i; j < n; j++){
      dp[i][j] = new Pair(0, 0);
    }
  }
  // 先填入 base case--- 填满了斜着的中线
  for (let i = 0; i < n; i++) {
      dp[i][i].fir = piles[i]; //只有一堆石头，先出手那肯定就是piles[i]
      dp[i][i].sec = 0; //后手没有了，就是0
  }
  // 斜着遍历数组
  for (let l = 2; l <= n; l++) {
      for (let i = 0; i <= n - l; i++) {
          let j = l + i - 1;
          // 先手选择最左边或最右边的分数
          //===============博弈部分=================== 
          
          let left = piles[i] + dp[i+1][j].sec;
          let right = piles[j] + dp[i][j-1].sec;
          // 套用状态转移方程
          if (left > right) {
              dp[i][j].fir = left; //也就是Max值，
              dp[i][j].sec = dp[i+1][j].fir; //先手选择左边的话,给我剩下了 piles[i+1...j]
          } else {
              dp[i][j].fir = right; //也就是Max
              dp[i][j].sec = dp[i][j-1].fir; //先手选择右边的话，给我留下了piles[1...j-1]
          }
          
          //===============博弈部分=================== 
      }
  }
  res = dp[0][n-1];
  return res.fir - res.sec; //返回先手得分-后手得分的差值
}
console.log(stoneGame(piles));


// 斜着遍历数组
/*
for (let l = 2; l <= n; l++) {
  for (let i = 0; i <= n - l; i++) {
      let j = l + i - 1;
      // 计算 dp[i][j]
  }
}
 */