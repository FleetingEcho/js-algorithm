// 分阶段求解问题， 通过分解为子问题解决
/*
动态规划的实现通常按照以下步骤设计算法：
1.找出最优解的性质，并刻画其结构特征；
2.递归的定义最优值；
3.以自底向上的方式计算出最优值；
4.通过计算最优值时刻意记录的判断结果来构造最优解。

使用该算法思想设计算法的问题一般会具有的性质：
1.最优子结构性质
2.子问题重叠性质

*/

// 例：给定一个偶数长度的数组，其中不同的数字代表着不同种类的糖果，每一个数字代表一个糖果。
// 你需要把这些糖果平均分给一个弟弟和一个妹妹。返回妹妹可以获得的最大糖果的种类数。


// * 解题思路---1.去重，最大值就是数组长度的1/2


function candy(candies){
  //记录判断结果参数
  let obj = {};
  let count = 0;
  candies.every(item=> {
      if(!obj[item]){
          obj[item] = 1;
          count++
      }
      //定义最优值
      if(count === (candies.length) / 2){
          return false
      }else{
          return true
      }
  })
  return count
}

//调用
let arr = [1,1,2,2,3,3,4,4]
console.log(candy(arr))
