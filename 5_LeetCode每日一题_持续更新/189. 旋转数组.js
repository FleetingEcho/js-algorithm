// 189. 旋转数组
/* 
给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。

 

进阶：

尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。
你可以使用空间复杂度为 O(1) 的 原地 算法解决这个问题吗？
 

示例 1:

输入: nums = [1,2,3,4,5,6,7], k = 3
输出: [5,6,7,1,2,3,4]
解释:
向右旋转 1 步: [7,1,2,3,4,5,6]
向右旋转 2 步: [6,7,1,2,3,4,5]
向右旋转 3 步: [5,6,7,1,2,3,4]


输入：nums = [-1,-100,3,99], k = 2
输出：[3,99,-1,-100]
解释: 
向右旋转 1 步: [99,-1,-100,3]
向右旋转 2 步: [3,99,-1,-100]
*/

// 由底层逻辑实现可能更快
const rotate = function (nums, k) {
	nums.splice(0, 0, ...nums.splice(-(k %= nums.length), k))
}

const rotate = function (nums, k) {
	let n = nums.length,
		i = -1,
		arr = new Int32Array(n)
	while (++i < n) arr[(i + k) % n] = nums[i]
	while (i--) nums[i] = arr[i]
}
